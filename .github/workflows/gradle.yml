name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Set up Docker Buildx # Docker Buildx를 설정 -> 도커 이미지를 빌드하기 위한 빌더로, 여러 플랫폼에서 빌드를 수행한다.
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub # 도커허브에 로그인한다.
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image # 도커 이미지 빌드 및 허브에 이미지 Push
        uses: docker/build-push-action@v5
        with:
          context: . # 현재 디렉토리
          file: ./Dockerfile # 사용할 도커파일 위치
          push: true
          tags: ${{ secrets.DOCKERHUB_ID }}/just_one_bite:latest

      - name: Deploy to Server # appleboy/ssh-action@master 를 통해 서버에 SSH 접속을 수행하고 deploy.sh 스크립트를 실행해 배포를 진행
        uses: appleboy/ssh-action@v0.1.10
        env:
          DOCKERHUB_ID: ${{ secrets.DOCKERHUB_ID }}
          DOCKERHUB_PW: ${{ secrets.DOCKERHUB_TOKEN }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GEMINI_API_URL: ${{ secrets.GEMINI_API_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: DOCKERHUB_ID, DOCKERHUB_TOKEN, POSTGRES_USER, POSTGRES_PASSWORD, REDIS_PASSWORD, GEMINI_API_URL, GEMINI_API_KEY, JWT_SECRET_KEY
          script: |
            cd /home/ubuntu/deploy
            echo DOCKERHUB_ID=${DOCKERHUB_ID} > .env
            echo DOCKERHUB_TOKEN=${DOCKERHUB_TOKEN} >> .env
            echo POSTGRES_USER=${POSTGRES_USER} >> .env
            echo POSTGRES_PASSWORD=${POSTGRES_PASSWORD} >> .env
            echo REDIS_PASSWORD=${REDIS_PASSWORD} >> .env
            echo GEMINI_API_URL=${GEMINI_API_URL} >> .env
            echo GEMINI_API_KEY=${GEMINI_API_KEY} >> .env
            echo JWT_SECRET_KEY=${JWT_SECRET_KEY} >> .env
            ./deploy.sh
